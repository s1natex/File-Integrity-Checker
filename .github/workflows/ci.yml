name: CI

on:
#   push:
#     branches: [ main ]
#     tags: [ 'v*' ]
#   pull_request:
#     branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read

env:
  PIP_DISABLE_PIP_VERSION_CHECK: "1"
  PIP_NO_PYTHON_VERSION_WARNING: "1"

jobs:
  lint:
    name: Lint (ruff + black)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            ~/Library/Caches/pip
            ~\AppData\Local\pip\Cache
          key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - run: python -m pip install --upgrade pip ruff==0.5.7 black==24.8.0
      - name: Ruff (lint)
        run: ruff check .
      - name: Black (format check)
        run: black --check --diff .

  sast:
    name: Static Security (Bandit)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            ~/Library/Caches/pip
            ~\AppData\Local\pip\Cache
          key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Run Bandit (SAST)
        run: |
          python -m pip install --upgrade pip bandit
          bandit -r . -ll

  sca:
    name: Dependency Audit (pip-audit)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            ~/Library/Caches/pip
            ~\AppData\Local\pip\Cache
          key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Run pip-audit (SCA)
        run: |
          python -m pip install --upgrade pip pip-audit
          pip-audit

  test:
    name: CLI Smoke (matrix)
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            ~/Library/Caches/pip
            ~\AppData\Local\pip\Cache
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install package (editable)
        run: |
          python -m pip install --upgrade pip
          python -m pip install -e .
      - name: CLI smoke integrity-check --help
        shell: bash
        run: |
          set -e
          integrity-check --help >/dev/null

  build:
    name: Build (wheel + sdist)
    runs-on: ubuntu-latest
    needs: [lint, test, sast, sca]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            ~/Library/Caches/pip
            ~\AppData\Local\pip\Cache
          key: ${{ runner.os }}-pip-build-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Build (clean + deps)
        run: |
          rm -rf dist build *.egg-info
          python -m pip install --upgrade pip
          python -m pip install --upgrade build==1.2.1 hatchling>=1.25.0 twine>=5.1.1 pkginfo>=1.10.0
          python -m build
      - name: Show wheel METADATA (sanity)
        run: |
          python - <<'PY'
          import zipfile, glob, os
          for whl in sorted(glob.glob('dist/*.whl')):
              with zipfile.ZipFile(whl) as z:
                  meta = [n for n in z.namelist() if n.endswith('METADATA')][0]
                  head = z.read(meta).decode().splitlines()[:6]
              print(os.path.basename(whl), "->", *head, sep="\n  ")
          PY
      - name: Check built artifacts (metadata)
        run: python -m twine check dist/*
      - name: Upload dist artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/*

  verify-wheel:
    name: Verify wheel with pipx
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            ~/Library/Caches/pip
            ~\AppData\Local\pip\Cache
          key: ${{ runner.os }}-pip-verify-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install via pipx and smoke test
        run: |
          python -m pip install --upgrade pip pipx==1.7.1
          # ensurepath won't affect this non-login shell; call the binary directly:
          pipx install --force dist/*.whl
          ~/.local/bin/integrity-check --help >/dev/null

  dast:
    name: Dynamic Smoke Security Test
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            ~/Library/Caches/pip
            ~\AppData\Local\pip\Cache
          key: ${{ runner.os }}-pip-dast-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install via pipx and run against sample
        run: |
          python -m pip install --upgrade pip pipx==1.7.1
          pipx install --force dist/*.whl
          mkdir -p /tmp/integrity-test
          echo "dummy" > /tmp/integrity-test/file.txt
          ~/.local/bin/integrity-check /tmp/integrity-test >/dev/null

#   publish:
#     name: Publish to PyPI (tagged releases)
#     if: startsWith(github.ref, 'refs/tags/v')
#     needs: [build, verify-wheel, dast]
#     runs-on: ubuntu-latest
#     permissions:
#       c
